------------------------------------------------------------
Lab4 feedback for Strizower, Elias B. (ebs021)
------------------------------------------------------------
prelab: (P1) Read the manual page for the socket(2) call. Compare this call to pipe(2)
and open(2); explain the similarities and the differences you observe. (5
points)

(P2) Read the code in echod.c and echoreq.c.

  1. Explain how one program addresses the other program for communication over a TCP socket. (4 points)
  2. Explain the purpose of the bind(2) call. (4 points)
  3. Explain the purpose of the connect(2) call. (4 points)
  4. Explain the purpose of the listen(2) call. (4 points)
  5. Explain the purpose of the accept(2) call. (4 points)
  6. One of your tasks in lab will be to implement message exchanges between echoreq and echod over a TCP socket. Do a little reading to discover what system calls you will need to use. Explain how you will be able to send and to receive messages. (5 points)
	Score: 30 / 30
	Comment: Good

Problem 1: Go through the code you have written for previous labs and find all the
wrapper functions you wrote to substitute for system and library calls. Your
files should include wrappers for the following functions: fork(2), pipe(2),
wait(2), waitpid(2), open(2), close(2), write(2), read(2), connect(2),
bind(2), listen(2), accept(2), and any others you use in this lab which set
the errno variable when encountering an error condition.
	Score: 10 / 10
	Comment: Good

Problem 2: You will need to turn in a Makefile that generates all the objects and the
executables for this lab assignment. (This includes a rule for building
wrappers.o!)
	Score: 5 / 5
	Comment: Good

Problem 3: 5 pts for using system call wrappers; 15 pts for correct communication between
echod and echoreq; 5 pts for correct code to clean up blank spaces.
	Score: 23 / 25
	Comment: Did not wrap all system functions.

Problem 4: 1. If no calls were made to fork in either of the programs you have, why is it that we’re claiming that TCP sockets are a mechanism for interprocess communication?
  2. Is the socket functionality provided by the kernel or by an external library? Present an argument to justify your answer from the perspectives of the actual implementation on Linux and from the perspective of the design decisions made for the construction of the operating system (think about the implications of these decisions on the performance of a modern networked computer). You should think about what makes sense, do a little research to verify whether you are on the right track, reason about your findings, and only then write your conclusions.
  3. Only when you consider a program’s communications needs and the operational constraints around a program can you choose which of the two IPC mechanisms is most appropriate. Describe what drives you decision to use either pipes and sockets to interconnect two processes.
  4. echoreq makes a call to gethostbyname(3). Explain what this library call does for your program and how you use its API.
  5. gethostbyname(3) is not the most up-to-date function for its kind of task (it is deprecated). Discover what function might eventually replace gethostbyname(3) and explain how differently it might work.
	Score: 17 / 20
	Comment: Sockets are an interface provided by the kernel. They are not an external library although many libraries build upon them. Note that socket is in man 2 (system calls).

Problem 5: Copy the echoreq.c file to a new file called echoreq2.c. Once you have
discovered a modern alternative to gethostbyname(3), modify echoreq2.c so that
it uses this new version. Otherwise, the behavior echoreq2.c should be
identical to what you see in your solution to Problem 3.
	Score: 8 / 10
	Comment: Incorrect output

------------------------------------------------------------
TOTAL 93.0 / 100
------------------------------------------------------------

