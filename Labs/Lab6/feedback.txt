------------------------------------------------------------
Lab6 feedback for Strizower, Elias B. (ebs021)
------------------------------------------------------------
pre1a: * Correct comments for the lines marked as ADD COMMENT HERE.
  * All functions use wrappers.
  * Redefined MYPORT above 8000.
  * write the code for a new function called printsin() according to the specifications below, uncomment the calls to printsin in recv_udp.c and build the executable.
	Score: 17 / 20
	Comment: Did not make because of the "restrict" keyword in the wrapper files.

problem1: 1. Modify getfile.c, fileserver.c, and getstats.c to use the wrapper functions with error checking that you have been building up over the semester.
  2. Create a Makefile to build the executables corresponding to the three C files given to you.
  3. Modify fileserver.c to start up a new concurrent thread for every request it receives. Note that you need to limit the maximum number of concurrent threads your spawn so that your server is not easy prey to denial of service attacks. (Choose a reasonable limit for your number of server threads.)
  4. Augment the server in fileserver.c to respond to get status requests with the following information:
    * number of file requests served
    * number of status requests served
    * number of file not found errors
    * average length of files requested
	Score: 30 / 35
	Comment: It looks like it was right, but your Makefile doesn't work as it is. I can't compile problem1 if you overwrite it for problem2.

problem2: 1. Adapt your Makefile so that it builds the executables that correspond to your new C files.
  2. Modify your multithreaded client/server to create a new implementation that uses UDP sockets instead of TCP sockets.
  3. When you are confident that you have debugged your code, create a text file called output2.txt with the record of a few sample runs of ugetfile and ugetstats for your threaded application. What you record in this file must be enough to demonstrate that your programs work correctly.
	Score: 20 / 35
	Comment: Does not compile, and the only communication that is being done with UDP is the initial request. All of the file transfer logic is identical.

prea1b: 1. Two functions used in these programs are of particular interest to you: recvfrom and sendto. Read their man pages to understand what these functions do. Write in your file pre-lab.txt a brief explanation of what you learned about these functions from the man pages.
  2. In pre-lab.txt, write a brief explanation about how different it is to work with UDP and TCP sockets. Use and cite your favorite sources.
	Score: 8 / 10
	Comment: I don't understand why it would be easier to translate back from UDP or why you need to determine the order of TCP packets (TCP takes care of ordering, so it's very simple).

------------------------------------------------------------
TOTAL 75.0 / 100
------------------------------------------------------------

